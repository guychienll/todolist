{"version":3,"sources":["components/Tools.tsx","enum/ENUM_ITEM_PROCESS_TYPE.tsx","components/Form.tsx","components/Tabs.tsx","components/List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ENUM_ITEM_PROCESS_TYPE","StyledTools","styled","div","Tools","workingBuffer","isEditing","archiveItemsHandler","clickEditHandler","completeItemsHandler","isArchiveDisabled","length","isEditDisabled","onClick","disabled","data-testid","value","StyledForm","Form","changeItemBufferHandler","addItemHandler","saveItemHandler","itemBuffer","onChange","type","name","title","placeholder","StlyedTabs","Tabs","clickTabHandler","UNDONE","DONE","ARCHIVED","StyledList","ul","List","items","AddItemInWorkingBuffer","tabState","filter","item","process","sort","a","b","parseInt","id","map","key","checked","includes","className","htmlFor","Container","App","useState","setItems","UNKNOWN","setItemBuffer","setWorkingBuffer","setIsEditing","setTabState","e","target","cloneItemBuffer","Date","getTime","toString","cloneItems","push","indexOfEditingItem","findIndex","splice","cloneWorkingBuffer","indexOfWorkingBuffer","currentTarget","forEach","itemIndexWhichWouldBeCompleted","itemWouldBeUpdated","itemIndexWhichWouldBeArchived","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","reset","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec5b6a2c.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nconst StyledTools = styled.div`\n  display: flex;\n  margin-top: auto;\n  margin-bottom: 20px;\n  width: 200px;\n  align-items: center;\n  justify-content: space-around;\n  button {\n    height: 44px;\n    width: 60px;\n  }\n`;\ninterface IProps {\n  archiveItemsHandler: () => void;\n  clickEditHandler: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  completeItemsHandler: () => void;\n  isEditing: boolean;\n  workingBuffer: string[];\n}\nexport function Tools({\n  workingBuffer,\n  isEditing,\n  archiveItemsHandler,\n  clickEditHandler,\n  completeItemsHandler,\n}: IProps) {\n  const isArchiveDisabled = workingBuffer.length <= 0 || isEditing;\n  const isEditDisabled = workingBuffer.length !== 1 || isEditing;\n  return (\n    <StyledTools>\n      <button\n        onClick={completeItemsHandler}\n        disabled={workingBuffer.length <= 0 || isEditing}\n        data-testid=\"completeButton\"\n      >\n        complete\n      </button>\n      <button\n        onClick={archiveItemsHandler}\n        disabled={isArchiveDisabled}\n        data-testid=\"archiveButton\"\n      >\n        Archive\n      </button>\n      <button\n        onClick={clickEditHandler}\n        disabled={isEditDisabled}\n        data-testid=\"editButton\"\n        value={workingBuffer ? workingBuffer[0] : 0}\n      >\n        Edit\n      </button>\n    </StyledTools>\n  );\n}\n","export enum ENUM_ITEM_PROCESS_TYPE {\n  UNKNOWN = 0,\n  UNDONE = 1,\n  DONE = 2,\n  ARCHIVED = 3,\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Item } from \"../interface/Item\";\n\nexport const StyledForm = styled.div`\n  height: 44px;\n  display: flex;\n  align-items: center;\n  input,\n  button {\n    height: inherit;\n    transition: width ease 0.2s;\n  }\n  input {\n    width: 250px;\n    box-sizing: border-box;\n    font-size: 1.5rem;\n    border: 2px solid #000;\n    padding-left: 10px;\n    ::placeholder {\n      font-size: 1.5rem;\n    }\n  }\n  button {\n    width: 50px;\n    margin-left: 5px;\n  }\n  @media screen and (min-width: 414px) {\n    input {\n      width: 340px;\n    }\n  }\n  @media screen and (min-width: 767px) {\n    input {\n      width: 500px;\n    }\n  }\n`;\n\ninterface IProps {\n  changeItemBufferHandler: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  saveItemHandler: () => void;\n  addItemHandler: () => void;\n  itemBuffer: Item;\n  isEditing: boolean;\n}\nexport function Form({\n  changeItemBufferHandler,\n  addItemHandler,\n  saveItemHandler,\n  itemBuffer,\n  isEditing,\n}: IProps) {\n  return (\n    <StyledForm>\n      <input\n        onChange={changeItemBufferHandler}\n        type=\"text\"\n        name=\"title\"\n        value={itemBuffer.title}\n        placeholder=\"please enter your items...\"\n        data-testid=\"todoInput\"\n      />\n      <button\n        onClick={isEditing ? saveItemHandler : addItemHandler}\n        data-testid={isEditing ? \"saveButton\" : \"addButton\"}\n      >\n        {isEditing ? \"Save\" : \"Add\"}\n      </button>\n    </StyledForm>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ENUM_ITEM_PROCESS_TYPE } from \"../enum/ENUM_ITEM_PROCESS_TYPE\";\n\nconst StlyedTabs = styled.div`\n  display: flex;\n  width: 280px;\n  height: 44px;\n  align-items: center;\n  justify-content: start;\n  position: absolute;\n  top: -39px;\n  left: -2px;\n  button {\n    height: 34px;\n    border: 2px solid #000;\n    border-bottom: none;\n    border-radius: 3px 3px 0 0;\n    margin-right: 2px;\n    outline: none;\n    :hover {\n      font-size: 1.5rem;\n      outline: none;\n    }\n  }\n`;\n\ninterface IProps {\n  clickTabHandler: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport function Tabs({ clickTabHandler }: IProps) {\n  return (\n    <StlyedTabs>\n      <button\n        onClick={clickTabHandler}\n        value={ENUM_ITEM_PROCESS_TYPE.UNDONE}\n        data-testid=\"undoneButton\"\n      >\n        Undone\n      </button>\n      <button\n        onClick={clickTabHandler}\n        value={ENUM_ITEM_PROCESS_TYPE.DONE}\n        data-testid=\"doneButton\"\n      >\n        Done\n      </button>\n      <button\n        onClick={clickTabHandler}\n        value={ENUM_ITEM_PROCESS_TYPE.ARCHIVED}\n        data-testid=\"archivedButton\"\n      >\n        Archived\n      </button>\n    </StlyedTabs>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ENUM_ITEM_PROCESS_TYPE } from \"../enum/ENUM_ITEM_PROCESS_TYPE\";\nimport { Item } from \"../interface/Item\";\nimport { Tabs } from \"./Tabs\";\n\ninterface IProps {\n  items: Item[];\n  AddItemInWorkingBuffer: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  workingBuffer: string[];\n  tabState: ENUM_ITEM_PROCESS_TYPE;\n  clickTabHandler: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\nconst StyledList = styled.ul`\n  width: 280px;\n  min-height: calc(100vh - 280px);\n  border: 2px solid #000;\n  border-radius: 0 0 5px 5px;\n  position: relative;\n  margin-top: 40px;\n  transition: all ease 0.2s;\n  h1 {\n    width: 200px;\n    text-align: center;\n    margin: auto;\n    line-height: 280px;\n  }\n  li {\n    display: flex;\n    align-items: center;\n    padding: 5px;\n    font-size: 1.2rem;\n    cursor: pointer;\n    user-select: none;\n    max-width: 260px;\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    input {\n      display: none;\n      opacity: 0;\n      visibility: hidden;\n      :checked ~ .checkbox::after {\n        opacity: 1;\n      }\n    }\n    label {\n      font-size: 1.5rem;\n    }\n    .checkbox {\n      min-width: 20px;\n      height: 20px;\n      border: 2px solid #000;\n      margin: 0 3px 0 3px;\n      position: relative;\n      ::after {\n        content: \"✔\";\n        position: absolute;\n        font-size: 1.2rem;\n        top: 0;\n        bottom: 0;\n        right: 0;\n        left: 2px;\n        opacity: 0;\n      }\n    }\n    button {\n      margin-left: 20px;\n    }\n  }\n  @media screen and (min-width: 414px) {\n    width: 350px;\n  }\n  @media screen and (min-width: 767px) {\n    width: 530px;\n  }\n`;\n\nexport function List({\n  items,\n  AddItemInWorkingBuffer,\n  workingBuffer,\n  tabState,\n  clickTabHandler,\n}: IProps) {\n  return (\n    <StyledList>\n      <Tabs clickTabHandler={clickTabHandler} />\n      {items.filter((item) => {\n        return item.process === tabState;\n      }).length === 0 ? (\n        <h1>No Items</h1>\n      ) : null}\n      {items\n        .filter((item) => {\n          return item.process === tabState;\n        })\n        .sort((a, b) => {\n          return parseInt(a.id) - parseInt(b.id);\n        })\n        .map((item) => {\n          return (\n            <li key={item.id} data-testid=\"item\">\n              <input\n                type=\"checkbox\"\n                id={item.id}\n                value={item.id}\n                onChange={AddItemInWorkingBuffer}\n                checked={workingBuffer.includes(item.id)}\n              />\n              <label className=\"checkbox\" htmlFor={item.id}></label>\n              <label htmlFor={item.id}>{item.title}</label>\n            </li>\n          );\n        })}\n    </StyledList>\n  );\n}\n","import { Tools } from \"./components/Tools\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { ENUM_ITEM_PROCESS_TYPE } from \"./enum/ENUM_ITEM_PROCESS_TYPE\";\nimport { Form } from \"./components/Form\";\nimport { Item } from \"./interface/Item\";\nimport { List } from \"./components/List\";\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  background: #eee;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  h1 {\n    font-size: 4rem;\n    padding: 15px;\n  }\n`;\n\nfunction App() {\n  const [items, setItems] = useState([] as Item[]);\n  const [itemBuffer, setItemBuffer] = useState({\n    id: \"\",\n    title: \"\",\n    process: ENUM_ITEM_PROCESS_TYPE.UNKNOWN,\n  } as Item);\n  const [workingBuffer, setWorkingBuffer] = useState([] as string[]);\n  const [isEditing, setIsEditing] = useState(false);\n  const [tabState, setTabState] = useState(ENUM_ITEM_PROCESS_TYPE.UNDONE);\n\n  const changeItemBufferHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    let cloneItemBuffer = { ...itemBuffer };\n    cloneItemBuffer.title = value;\n    cloneItemBuffer.id = new Date().getTime().toString();\n    cloneItemBuffer.process = ENUM_ITEM_PROCESS_TYPE.UNDONE;\n    setItemBuffer(cloneItemBuffer);\n  };\n  const addItemHandler = () => {\n    let cloneItems = [...items];\n    cloneItems.push(itemBuffer);\n    setItems(cloneItems);\n    setItemBuffer({\n      id: \"\",\n      title: \"\",\n      process: ENUM_ITEM_PROCESS_TYPE.UNKNOWN,\n    } as Item);\n  };\n\n  const completeItemsHandler = () => {\n    workingBuffer.forEach((id) => {\n      const cloneItems = items;\n      const itemIndexWhichWouldBeCompleted = cloneItems.findIndex((item) => {\n        return item.id === id;\n      });\n      cloneItems[itemIndexWhichWouldBeCompleted].process =\n        ENUM_ITEM_PROCESS_TYPE.DONE;\n      setItems(cloneItems);\n    });\n    setWorkingBuffer([]);\n  };\n\n  const archiveItemsHandler = () => {\n    workingBuffer.forEach((id) => {\n      const cloneItems = items;\n      const itemIndexWhichWouldBeArchived = cloneItems.findIndex((item) => {\n        return item.id === id;\n      });\n      cloneItems[itemIndexWhichWouldBeArchived].process =\n        ENUM_ITEM_PROCESS_TYPE.ARCHIVED;\n      setItems(cloneItems);\n    });\n    setWorkingBuffer([]);\n  };\n  const AddItemInWorkingBuffer = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = e.target;\n    let cloneWorkingBuffer = [...workingBuffer];\n    const indexOfWorkingBuffer = cloneWorkingBuffer.findIndex((id) => {\n      return id === value;\n    });\n    if (checked) {\n      cloneWorkingBuffer.push(value);\n      setWorkingBuffer(cloneWorkingBuffer);\n      return;\n    }\n    cloneWorkingBuffer.splice(indexOfWorkingBuffer, 1);\n    setWorkingBuffer(cloneWorkingBuffer);\n  };\n  const clickEditHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const { value } = e.currentTarget;\n    let cloneItemBuffer = { ...itemBuffer };\n    const itemWouldBeUpdated = items.filter((item) => {\n      return item.id === value;\n    })[0];\n    cloneItemBuffer.id = itemWouldBeUpdated.id;\n    cloneItemBuffer.title = itemWouldBeUpdated.title;\n    cloneItemBuffer.process = itemWouldBeUpdated.process;\n    setIsEditing(true);\n    setItemBuffer(cloneItemBuffer);\n  };\n  const saveItemHandler = () => {\n    let cloneItems = [...items];\n    const indexOfEditingItem = cloneItems.findIndex((item) => {\n      return item.id === itemBuffer.id;\n    });\n    cloneItems.splice(indexOfEditingItem, 1, itemBuffer);\n    setItems(cloneItems);\n    setItemBuffer({\n      id: \"\",\n      title: \"\",\n      process: ENUM_ITEM_PROCESS_TYPE.UNKNOWN,\n    } as Item);\n    setIsEditing(false);\n    setWorkingBuffer([]);\n  };\n  const clickTabHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const { value } = e.currentTarget;\n    setTabState(parseInt(value));\n  };\n\n  return (\n    <Container>\n      <h1>TO DO LIST</h1>\n      <Form\n        isEditing={isEditing}\n        changeItemBufferHandler={changeItemBufferHandler}\n        addItemHandler={addItemHandler}\n        saveItemHandler={saveItemHandler}\n        itemBuffer={itemBuffer}\n      />\n      <List\n        workingBuffer={workingBuffer}\n        AddItemInWorkingBuffer={AddItemInWorkingBuffer}\n        items={items}\n        clickTabHandler={clickTabHandler}\n        tabState={tabState}\n      />\n      <Tools\n        completeItemsHandler={completeItemsHandler}\n        clickEditHandler={clickEditHandler}\n        workingBuffer={workingBuffer}\n        archiveItemsHandler={archiveItemsHandler}\n        isEditing={isEditing}\n      />\n    </Container>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reset from \"styled-reset\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n  * , h1 , button ,li {\n    font-family: \"Amatic SC\" , cursive;\n  } \n  button{\n    font-size: 1rem;\n    border-radius:3px;\n    border: 2px solid #000;\n    cursor:pointer;\n    :disabled{\n      border: 2px solid #bbb;\n    }\n    :active{\n      font-size: 1.5rem;\n      outline: none;\n    }\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}